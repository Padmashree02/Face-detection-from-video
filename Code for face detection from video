FACE DETECTION FROM VIDEO

[2]
8s
!pip install mediapipe
Collecting mediapipe
  Downloading mediapipe-0.8.9.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (32.7 MB)
     |████████████████████████████████| 32.7 MB 1.3 MB/s 
Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mediapipe) (3.2.2)
Requirement already satisfied: attrs>=19.1.0 in /usr/local/lib/python3.7/dist-packages (from mediapipe) (21.4.0)
Requirement already satisfied: protobuf>=3.11.4 in /usr/local/lib/python3.7/dist-packages (from mediapipe) (3.17.3)
Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from mediapipe) (1.21.5)
Requirement already satisfied: opencv-contrib-python in /usr/local/lib/python3.7/dist-packages (from mediapipe) (4.1.2.30)
Requirement already satisfied: absl-py in /usr/local/lib/python3.7/dist-packages (from mediapipe) (1.0.0)
Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.7/dist-packages (from protobuf>=3.11.4->mediapipe) (1.15.0)
Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mediapipe) (2.8.2)
Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mediapipe) (0.11.0)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mediapipe) (3.0.7)
Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mediapipe) (1.3.2)
Installing collected packages: mediapipe
Successfully installed mediapipe-0.8.9.1

[3]
import cv2
import time
import mediapipe as mp

[9]
2m
path = '/content/crowd.mp4'
from google.colab.patches import cv2_imshow

cap = cv2.VideoCapture(path)

mpFaceDetection = mp.solutions.face_detection
mpDraw = mp.solutions.drawing_utils
faceDetection = mpFaceDetection.FaceDetection(model_selection=1, min_detection_confidence=0.5)

f = []

ptime = 0
while True:
    
    success, img = cap.read() 
    
    if success == True:
        
        ctime = time.time()
        #fps = 1 / (ctime - ptime)
        ptime = ctime
        #cv2.putText(img, f'FPS:{int(fps)}', (20,40), cv2.FONT_HERSHEY_PLAIN,3,(0,255,255),2)
        
        im = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        im.flags.writeable = False
        results = faceDetection.process(im)
        
        if results.detections:
            for i, detection in enumerate(results.detections):
                #mpDraw.draw_detection(img, detection)
                bboxc = detection.location_data.relative_bounding_box
                ih,iw,ic = img.shape
                bbox = int(bboxc.xmin * iw), int(bboxc.ymin * ih), int(bboxc.width * iw), int(bboxc.height * ih)
                cv2.rectangle(img, bbox, (255,0,255), 2)
                cv2.putText(img, f'{int(detection.score[0] * 100)}%',(bbox[0], bbox[1] - 20),cv2.FONT_HERSHEY_PLAIN,3,(0,255,0),2)
                #if(int(detection.score[0] * 100))
                f.append(img[int(bboxc.ymin * ih):int(bboxc.ymin * ih)+int(bboxc.height * ih),int(bboxc.xmin * iw):int(bboxc.xmin * iw)+int(bboxc.width * iw)])
    
        
        cv2_imshow(img)
    
        if cv2.waitKey(0) == ord('q'):
            break
            
    else:
        break
        
#cv2_imshow(f[0])
cap.release() 
cv2.destroyAllWindows()
print(len(f))
